// src/components/reports/ExportModal.jsx
import { useState } from 'react';
import { X, Download, FileText, Calendar, Settings, CheckCircle, AlertCircle } from 'lucide-react';

export default function ExportModal({ 
  isOpen, 
  onClose, 
  onExport,
  quarter,
  year,
  totalInspections = 0
}) {
  const [includeSummary, setIncludeSummary] = useState(true);
  const [includeDetails, setIncludeDetails] = useState(true);
  const [customDateRange, setCustomDateRange] = useState(false);
  const [dateFrom, setDateFrom] = useState('');
  const [dateTo, setDateTo] = useState('');
  const [exporting, setExporting] = useState(false);

  if (!isOpen) return null;

  const handleExport = async () => {
    setExporting(true);
    try {
      const exportOptions = {
        format: 'pdf', // Always PDF
        includeSummary,
        includeDetails,
        customDateRange,
        dateFrom: customDateRange ? dateFrom : null,
        dateTo: customDateRange ? dateTo : null,
        quarter,
        year
      };
      
      await onExport(exportOptions);
      onClose();
    } catch (error) {
      console.error('Export failed:', error);
    } finally {
      setExporting(false);
    }
  };

  const getQuarterDates = (quarter, year) => {
    const quarters = {
      1: { start: `${year}-01-01`, end: `${year}-03-31` },
      2: { start: `${year}-04-01`, end: `${year}-06-30` },
      3: { start: `${year}-07-01`, end: `${year}-09-30` },
      4: { start: `${year}-10-01`, end: `${year}-12-31` }
    };
    return quarters[quarter];
  };

  const quarterDates = getQuarterDates(quarter, year);
  const hasValidDateRange = !customDateRange || (dateFrom && dateTo);
  const canExport = hasValidDateRange && totalInspections > 0;

  return (
    <div className="fixed inset-0 z-50 bg-white">
      <div className="h-full flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200 bg-gradient-to-r from-green-50 to-blue-50">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-green-100 rounded-xl">
              <Download className="w-6 h-6 text-green-600" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-gray-900">Export Report</h2>
              <p className="text-sm text-gray-600">Configure your export options</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <X className="w-5 h-5 text-gray-500" />
          </button>
        </div>

        {/* Content */}
        <div className="flex-1 p-8 space-y-8 overflow-y-auto">
          {/* Export Format - PDF Only */}
          <div className="bg-gradient-to-r from-blue-50 to-green-50 p-6 rounded-2xl border border-blue-200">
            <label className="block text-lg font-bold text-gray-800 mb-4">Export Format</label>
            <div className="flex items-center p-6 border-2 border-green-500 bg-white rounded-xl shadow-lg">
              <div className="flex items-center gap-4">
                <div className="p-3 bg-red-100 rounded-xl">
                  <FileText className="w-8 h-8 text-red-600" />
                </div>
                <div className="flex-1">
                  <p className="text-xl font-bold text-gray-900">PDF Document (Backend Generated)</p>
                  <p className="text-base text-gray-600 mt-1">Professional government-standard reports with official branding</p>
                </div>
                <CheckCircle className="w-8 h-8 text-green-600" />
              </div>
            </div>
            <p className="text-sm text-gray-600 mt-4 bg-white p-3 rounded-lg border">
              âœ¨ All PDF reports are generated by the backend system with professional styling, government branding, and official formatting standards
            </p>
          </div>

          {/* Date Range */}
          <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-6 rounded-2xl border border-purple-200">
            <label className="block text-lg font-bold text-gray-800 mb-6">Date Range Selection</label>
            <div className="space-y-6">
              <label className="flex items-center p-6 border-2 border-blue-300 bg-white rounded-xl cursor-pointer transition-all duration-200 hover:bg-blue-50 hover:border-blue-400 shadow-md">
                <input
                  type="radio"
                  name="dateRange"
                  checked={!customDateRange}
                  onChange={() => setCustomDateRange(false)}
                  className="w-5 h-5 text-blue-600 focus:ring-blue-500"
                />
                <div className="ml-4">
                  <p className="text-lg font-bold text-gray-900">
                    Q{quarter} {year} ({quarterDates.start} to {quarterDates.end})
                  </p>
                  <p className="text-sm text-gray-600 mt-1">Use predefined quarter dates</p>
                </div>
              </label>
              
              <label className="flex items-center p-6 border-2 border-purple-300 bg-white rounded-xl cursor-pointer transition-all duration-200 hover:bg-purple-50 hover:border-purple-400 shadow-md">
                <input
                  type="radio"
                  name="dateRange"
                  checked={customDateRange}
                  onChange={() => setCustomDateRange(true)}
                  className="w-5 h-5 text-purple-600 focus:ring-purple-500"
                />
                <div className="ml-4">
                  <p className="text-lg font-bold text-gray-900">Custom date range</p>
                  <p className="text-sm text-gray-600 mt-1">Specify your own date range</p>
                </div>
              </label>

              {customDateRange && (
                <div className="ml-8 p-6 bg-white rounded-xl border-2 border-purple-200 shadow-lg">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-base font-bold text-gray-700 mb-3">From Date</label>
                      <input
                        type="date"
                        value={dateFrom}
                        onChange={(e) => setDateFrom(e.target.value)}
                        className="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-lg"
                      />
                    </div>
                    <div>
                      <label className="block text-base font-bold text-gray-700 mb-3">To Date</label>
                      <input
                        type="date"
                        value={dateTo}
                        onChange={(e) => setDateTo(e.target.value)}
                        className="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-lg"
                      />
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Content Options */}
          <div className="bg-gradient-to-r from-green-50 to-teal-50 p-6 rounded-2xl border border-green-200">
            <label className="block text-lg font-bold text-gray-800 mb-6">Content Options</label>
            <div className="space-y-4">
              <label className="flex items-center p-5 border-2 border-green-300 bg-white rounded-xl hover:bg-green-50 hover:border-green-400 transition-all duration-200 shadow-md">
                <input
                  type="checkbox"
                  checked={includeSummary}
                  onChange={(e) => setIncludeSummary(e.target.checked)}
                  className="w-5 h-5 text-green-600 focus:ring-green-500 rounded"
                />
                <div className="ml-4">
                  <p className="text-lg font-bold text-gray-900">Summary statistics and metrics</p>
                  <p className="text-sm text-gray-600 mt-1">Include compliance rates and totals</p>
                </div>
              </label>
              
              <label className="flex items-center p-5 border-2 border-green-300 bg-white rounded-xl hover:bg-green-50 hover:border-green-400 transition-all duration-200 shadow-md">
                <input
                  type="checkbox"
                  checked={includeDetails}
                  onChange={(e) => setIncludeDetails(e.target.checked)}
                  className="w-5 h-5 text-green-600 focus:ring-green-500 rounded"
                />
                <div className="ml-4">
                  <p className="text-lg font-bold text-gray-900">Detailed inspection list</p>
                  <p className="text-sm text-gray-600 mt-1">Include individual inspection records</p>
                </div>
              </label>
              
            </div>
          </div>

          {/* Export Preview */}
          <div className="bg-gradient-to-r from-orange-50 to-yellow-50 p-6 rounded-2xl border border-orange-200">
            <div className="flex items-center gap-3 mb-6">
              <div className="p-2 bg-orange-100 rounded-lg">
                <Calendar className="w-6 h-6 text-orange-600" />
              </div>
              <span className="text-xl font-bold text-gray-800">Export Preview</span>
            </div>
            <div className="bg-white p-6 rounded-xl border border-orange-200">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-base">
                <div className="space-y-4">
                  <div className="flex items-center gap-3">
                    <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                    <span className="text-gray-700">
                      <span className="font-bold text-lg">{totalInspections}</span> inspections will be included
                    </span>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span className="text-gray-700">Format: <span className="font-bold">PDF</span></span>
                  </div>
                </div>
                <div className="space-y-4">
                  <div className="flex items-center gap-3">
                    <div className="w-3 h-3 bg-purple-500 rounded-full"></div>
                    <span className="text-gray-700">
                      Period: <span className="font-bold">
                        {customDateRange ? `${dateFrom} to ${dateTo}` : `Q${quarter} ${year}`}
                      </span>
                    </span>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
                    <span className="text-gray-700">
                      Content: <span className="font-bold">
                        {[includeSummary && 'Summary', includeDetails && 'Details']
                          .filter(Boolean).join(', ') || 'None'}
                      </span>
                    </span>
                  </div>
                </div>
              </div>
            </div>
            
            {totalInspections === 0 && (
              <div className="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <div className="flex items-center gap-2">
                  <AlertCircle className="w-4 h-4 text-yellow-600" />
                  <span className="text-sm text-yellow-800">
                    No inspections found for the selected period. Please check your date range or try a different quarter.
                  </span>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between p-8 border-t-2 border-gray-200 bg-gradient-to-r from-gray-50 to-gray-100">
          <div className="text-base text-gray-600">
            {exporting && (
              <div className="flex items-center gap-3">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-green-600"></div>
                <span className="font-semibold">Generating report...</span>
              </div>
            )}
          </div>
          <div className="flex items-center gap-4">
            <button
              onClick={onClose}
              className="px-6 py-3 text-base font-semibold text-gray-700 bg-white border-2 border-gray-300 rounded-xl hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 shadow-md"
            >
              Cancel
            </button>
            <button
              onClick={handleExport}
              disabled={exporting || !canExport}
              className="flex items-center gap-3 px-8 py-3 text-base font-semibold text-white bg-gradient-to-r from-green-600 to-green-700 rounded-xl hover:from-green-700 hover:to-green-800 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg hover:shadow-xl"
            >
              <Download className="w-5 h-5" />
              {exporting ? 'Exporting...' : 'Export Report'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
